{
  "version": 3,
  "sources": ["../../../../node_modules/.pnpm/mitt@1.1.3/node_modules/mitt/dist/mitt.es.js"],
  "sourcesContent": ["//      \n// An event handler can take an optional event argument\n// and should not return a value\n                                          \n                                                               \n\n// An array of all currently registered event handlers for a type\n                                            \n                                                            \n// A map of event types and their corresponding event handlers.\n                        \n                                 \n                                   \n  \n\n/** Mitt: Tiny (~200b) functional event emitter / pubsub.\n *  @name mitt\n *  @returns {Mitt}\n */\nfunction mitt(all                 ) {\n\tall = all || Object.create(null);\n\n\treturn {\n\t\t/**\n\t\t * Register an event handler for the given type.\n\t\t *\n\t\t * @param  {String} type\tType of event to listen for, or `\"*\"` for all events\n\t\t * @param  {Function} handler Function to call in response to given event\n\t\t * @memberOf mitt\n\t\t */\n\t\ton: function on(type        , handler              ) {\n\t\t\t(all[type] || (all[type] = [])).push(handler);\n\t\t},\n\n\t\t/**\n\t\t * Remove an event handler for the given type.\n\t\t *\n\t\t * @param  {String} type\tType of event to unregister `handler` from, or `\"*\"`\n\t\t * @param  {Function} handler Handler function to remove\n\t\t * @memberOf mitt\n\t\t */\n\t\toff: function off(type        , handler              ) {\n\t\t\tif (all[type]) {\n\t\t\t\tall[type].splice(all[type].indexOf(handler) >>> 0, 1);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Invoke all handlers for the given type.\n\t\t * If present, `\"*\"` handlers are invoked after type-matched handlers.\n\t\t *\n\t\t * @param {String} type  The event type to invoke\n\t\t * @param {Any} [evt]  Any value (object is recommended and powerful), passed to each handler\n\t\t * @memberOf mitt\n\t\t */\n\t\temit: function emit(type        , evt     ) {\n\t\t\t(all[type] || []).slice().map(function (handler) { handler(evt); });\n\t\t\t(all['*'] || []).slice().map(function (handler) { handler(type, evt); });\n\t\t}\n\t};\n}\n\nexport default mitt;\n//# sourceMappingURL=mitt.es.js.map\n"],
  "mappings": ";;;AAmBA,SAAS,KAAK,KAAsB;AACnC,QAAM,OAAO,uBAAO,OAAO,IAAI;AAE/B,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQN,IAAI,SAAS,GAAG,MAAc,SAAuB;AACpD,OAAC,IAAI,IAAI,MAAM,IAAI,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO;AAAA,IAC7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASA,KAAK,SAAS,IAAI,MAAc,SAAuB;AACtD,UAAI,IAAI,IAAI,GAAG;AACd,YAAI,IAAI,EAAE,OAAO,IAAI,IAAI,EAAE,QAAQ,OAAO,MAAM,GAAG,CAAC;AAAA,MACrD;AAAA,IACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUA,MAAM,SAAS,KAAK,MAAc,KAAU;AAC3C,OAAC,IAAI,IAAI,KAAK,CAAC,GAAG,MAAM,EAAE,IAAI,SAAU,SAAS;AAAE,gBAAQ,GAAG;AAAA,MAAG,CAAC;AAClE,OAAC,IAAI,GAAG,KAAK,CAAC,GAAG,MAAM,EAAE,IAAI,SAAU,SAAS;AAAE,gBAAQ,MAAM,GAAG;AAAA,MAAG,CAAC;AAAA,IACxE;AAAA,EACD;AACD;AAEA,IAAO,kBAAQ;",
  "names": []
}
